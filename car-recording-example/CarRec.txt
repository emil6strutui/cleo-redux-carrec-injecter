{$CLEO .cs}

//-------------MAIN---------------
thread 'CARREC'
0ADF: add_dynamic_GXT_entry "CARREC1" text "Car Recording Script ~t~is ready. ~h~Press ~o~R ~h~to start recording. ~h~Press ~p~P ~h~to play last recording. Press ~y~C~h~+~y~1 ~h~to exit."
0ADF: add_dynamic_GXT_entry "CARREC2" text "~h~Press ~o~R ~h~to stop recording."
0ADF: add_dynamic_GXT_entry "CARREC3" text "~h~Press ~q~O ~h~to pause or ~p~P ~h~to finish playback. Hold ~x~I ~h~to rewind."
0AF0: 1@ = get_int_from_ini_file "cleo\carrec.ini" section "MAIN" key "HIDEZCNAM" // "Hide zone/car names to prevent some bugs" trigger
0039:   1@ == 1
jf @CARRECORD_INITIAL
0A8C: write_memory 0x5599C2 size 5 value 0x90 virtual_protect 1  // hide zone name to prevent some bugs
0A8C: write_memory 0x559E8E size 5 value 0x90 virtual_protect 1  // hide car name to prevent some bugs

:CARRECORD_INITIAL
wait 0
if and
   Player.Defined($PLAYER_CHAR)
00E0:   player $PLAYER_CHAR driving
jf @CARRECORD_INITIAL
0AB1: call_scm_func @IF1OR2KEYSPRESSEDANDTHENRELEASED 2 67 49 5@ // If Pressed and then Released C + 1
0039:   5@ == 1
jf @CARRECORD_INITIAL
03C1: 0@ = player $PLAYER_CHAR car_no_save
0AF0: 1@ = get_int_from_ini_file "cleo\carrec.ini" section "MAIN" key "MEMLIMIT" // memory limit
0AF0: 10@ = get_int_from_ini_file "cleo\carrec.ini" section "MAIN" key "CLRTRWREC" // "Clear traffic while recording" trigger
0AF0: 11@ = get_int_from_ini_file "cleo\carrec.ini" section "MAIN" key "CLRTRWPLA" // "Clear traffic while playback" trigger
0AF0: 12@ = get_int_from_ini_file "cleo\carrec.ini" section "MAIN" key "SHOWALLST" // "Show all script's text" trigger
018C: play_sound 14 at 0.0 0.0 0.0
0039:   12@ == 1
jf @CARRECORD_CYCLE
0512: show_permanent_text_box 'CARREC1'

:CARRECORD_CYCLE
wait 0
if and
   Player.Defined($PLAYER_CHAR)
00E0:   player $PLAYER_CHAR driving
8039:   NOT 0@ == -1
00DC:   player $PLAYER_CHAR driving 0@
jf @CARRECORD_CANCEL
0AB1: call_scm_func @IF1OR2KEYSPRESSEDANDTHENRELEASED 2 67 49 5@ // If Pressed and then Released C + 1
0039:   5@ == 0
jf @CARRECORD_CANCEL
0AB1: call_scm_func @IF1OR2KEYSPRESSEDANDTHENRELEASED 1 82 5@ // If Pressed and then Released R
0039:   5@ == 1
jf @CARRECORD_PLAY
if and
   Player.Defined($PLAYER_CHAR)
00E0:   player $PLAYER_CHAR driving
8039:   NOT 0@ == -1
00DC:   player $PLAYER_CHAR driving 0@
jf @CARRECORD_CANCEL
0039:   10@ == 1
jf @CARRECORD_RECORDING_START
01EB: set_traffic_density_multiplier_to 0.0
03DE: set_pedestrians_density_multiplier_to 0.0
03BA: clear_cars_from_cube -2000.0 -2000.0 -500.0 2000.0 2000.0 5000.0
042B: clear_peds_from_cube -2000.0 -2000.0 -500.0 2000.0 2000.0 5000.0

:CARRECORD_RECORDING_START
0AB1: call_scm_func @ALLOCATEMEMORY 1 1@ 2@ // FileSize, store AllocMemoryAddress(2@)
018C: play_sound 16 at 0.0 0.0 0.0
0039:   12@ == 1
jf @CARRECORD_RECORDING_CYCLE
0512: show_permanent_text_box 'CARREC2'

:CARRECORD_RECORDING_CYCLE
0039:   10@ == 1
jf @CARRECORD_RECORDING_CYCLE2
01EB: set_traffic_density_multiplier_to 0.0
03DE: set_pedestrians_density_multiplier_to 0.0

:CARRECORD_RECORDING_CYCLE2
0AB1: call_scm_func @CARRECORD_RECORDING 3 0@ 2@ 12@ 15@ 14@ 13@ // CarHandle, AllocMemoryAddress, ShowInfo, IsRecMemoryFull, Time, LastFrame
wait 0
if and
   Player.Defined($PLAYER_CHAR)
00E0:   player $PLAYER_CHAR driving
8039:   NOT 0@ == -1
jf @CARRECORD_END
if and
00DC:   player $PLAYER_CHAR driving 0@
8AB0: NOT key_pressed 82 // R
0039:   15@ == 0 // if recording memory is not full
jf @CARRECORD_END
jump @CARRECORD_RECORDING_CYCLE

:CARRECORD_END
0AB1: call_scm_func @CARRECORD_RECORDTOCR 1 2@ // AllocMemoryAddress
0AC9: free_allocated_memory 2@
018C: play_sound 10 at 0.0 0.0 0.0 
000E: 13@ -= 3
0039:   12@ == 1
jf @CARRECORD_END2
0ACE: show_formatted_text_box "~h~Recording ~x~is finished." 
0AD1: show_formatted_text_highpriority "~h~Time: ~x~%d sec. ~h~Last frame: ~x~%d" time 5000 14@ 13@

:CARRECORD_END2
0039:   10@ == 1
jf @CARRECORD_INITIAL
01EB: set_traffic_density_multiplier_to 1.0
03DE: set_pedestrians_density_multiplier_to 1.0
jump @CARRECORD_INITIAL

:CARRECORD_PLAY
0AB1: call_scm_func @IF1OR2KEYSPRESSEDANDTHENRELEASED 1 80 5@ // If Pressed and then Released P
0039:   5@ == 1
jf @CARRECORD_CYCLE
if and
   Player.Defined($PLAYER_CHAR)
00E0:   player $PLAYER_CHAR driving
8039:   NOT 0@ == -1
00DC:   player $PLAYER_CHAR driving 0@
jf @CARRECORD_CANCEL
if
0AAB: file_exists "cleo\recordings\carrec.cr"
jf @CARRECORD_CANCEL
0039:   11@ == 1
jf @CARRECORD_PLAY_START
01EB: set_traffic_density_multiplier_to 0.0
03DE: set_pedestrians_density_multiplier_to 0.0
03BA: clear_cars_from_cube -2000.0 -2000.0 -500.0 2000.0 2000.0 5000.0
042B: clear_peds_from_cube -2000.0 -2000.0 -500.0 2000.0 2000.0 5000.0

:CARRECORD_PLAY_START
0AB1: call_scm_func @CARRECORD_READCR 0 2@ // read recording file(carrec.cr), store to AllocMemoryAddress(2@)
03F5: set_vehicle 0@ apply_damage_rules 0
01EC: make_car 0@ very_heavy 1
018C: play_sound 16 at 0.0 0.0 0.0
0039:   12@ == 1
jf @CARRECORD_PLAY_CYCLE
0512: show_permanent_text_box 'CARREC3'

:CARRECORD_PLAY_CYCLE
0006: 4@ = 0 // playback is not paused
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 4@ 11@ // CarHandle, PauseTrigger, ClearTrafficTrigger
0AB1: call_scm_func @CARRECORD_PLAYBACK 4 0@ 2@ 0 12@ 15@ // CarHandle, AllocMemoryAddress, SetFrame, ShowInfo, GetFrame

:CARRECORD_PLAY_CYCLE2
wait 0
if and
   Player.Defined($PLAYER_CHAR)
8039:   NOT 0@ == -1
8AB0: NOT key_pressed 80 // P
//001B:   100 > 15@ // using current frame number we can disable playback loop
jf @CARRECORD_PLAY_END
8AB0: NOT key_pressed 73 // I
jf @CARRECORD_PLAY_REWIND
0AB0: key_pressed 79 // O
jf @CARRECORD_PLAY_CYCLE
0085: 14@ = 15@
000A: 14@ += 1 // pause activated, vehicle pauses on the next frame

:CARRECORD_PAUSEACTIVATED
0006: 4@ = 1 // playback is paused
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 4@ 11@ // CarHandle, PauseTrigger, ClearTrafficTrigger
0AB1: call_scm_func @CARRECORD_PLAYBACK 4 0@ 2@ 14@ 12@ 15@ // CarHandle, AllocMemoryAddress, SetFrame, ShowInfo, GetFrame
wait 0
if and
   Player.Defined($PLAYER_CHAR)
8039:   NOT 0@ == -1
8AB0: NOT key_pressed 80 // P
jf @CARRECORD_PLAY_END
if
8AB0: NOT key_pressed 79 // O
jf @CARRECORD_PAUSEACTIVATED

:CARRECORD_PAUSE_CYCLE
0006: 4@ = 1 // playback is paused
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 4@ 11@ // CarHandle, PauseTrigger, ClearTrafficTrigger
0AB1: call_scm_func @CARRECORD_PLAYBACK 4 0@ 2@ 14@ 12@ 15@ // CarHandle, AllocMemoryAddress, SetFrame, ShowInfo, GetFrame

:CARRECORD_PAUSE_CYCLE2
wait 0
if and
   Player.Defined($PLAYER_CHAR)
8039:   NOT 0@ == -1
8AB0: NOT key_pressed 80 // P
jf @CARRECORD_PLAY_END
8AB0: NOT key_pressed 73 // I
jf @CARRECORD_PAUSE_REWIND
if
0AB0: key_pressed 79 // O
jf @CARRECORD_PAUSE_CYCLE
0006: 14@ = 0 // pause deactivated

:CARRECORD_PLAYACTIVATED
0006: 4@ = 0 // playback is not paused
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 4@ 11@ // CarHandle, PauseTrigger, ClearTrafficTrigger
0AB1: call_scm_func @CARRECORD_PLAYBACK 4 0@ 2@ 0 12@ 15@ // CarHandle, AllocMemoryAddress, SetFrame, ShowInfo, GetFrame
wait 0
if and
   Player.Defined($PLAYER_CHAR)
8039:   NOT 0@ == -1
8AB0: NOT key_pressed 80 // P
jf @CARRECORD_PLAY_END
if
8AB0: NOT key_pressed 79 // O
jf @CARRECORD_PLAYACTIVATED
jump @CARRECORD_PLAY_CYCLE

:CARRECORD_PLAY_REWIND
gosub @CARRECORD_REWIND
jump @CARRECORD_PLAY_CYCLE2

:CARRECORD_PAUSE_REWIND
gosub @CARRECORD_REWIND
jump @CARRECORD_PAUSE_CYCLE2

:CARRECORD_REWIND
0006: 4@ = 1 // playback is paused
0085: 14@ = 15@
0019:   14@ > 0 // if current frame > 0
jf @CARRECORD_REWIND2
000E: 14@ -= 1  // in rewind mode, vehicle goes to previous frame

:CARRECORD_REWIND2
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 4@ 11@ // CarHandle, PauseTrigger, ClearTrafficTrigger
0AB1: call_scm_func @CARRECORD_PLAYBACK 4 0@ 2@ 14@ 12@ 15@ // CarHandle, AllocMemoryAddress, SetFrame, ShowInfo, GetFrame
return

:CARRECORD_PLAY_END
0AC9: free_allocated_memory 2@
018C: play_sound 10 at 0.0 0.0 0.0 
0039:   12@ == 1
jf @CARRECORD_PLAY_END2
0ACE: show_formatted_text_box "~h~Playback ~x~is finished."

:CARRECORD_PLAY_END2
0039:   11@ == 1
jf @CARRECORD_PLAY_END3
01EB: set_traffic_density_multiplier_to 1.0
03DE: set_pedestrians_density_multiplier_to 1.0

:CARRECORD_PLAY_END3
8039:   NOT 0@ == -1
jf @CARRECORD_INITIAL
03F5: set_vehicle 0@ apply_damage_rules 1
01EC: make_car 0@ very_heavy 0
0AB1: call_scm_func @STOP_CAR 1 0@
wait 0
0AB1: call_scm_func @CARRECORD_PLAY_CHECKSANDSETS 3 0@ 1 0 // CarHandle, PauseTrigger, ClearTrafficTrigger
jump @CARRECORD_INITIAL

:CARRECORD_CANCEL
018C: play_sound 13 at 0.0 0.0 0.0
0039:   12@ == 1
jf @CARRECORD_INITIAL
0ACE: show_formatted_text_box "Car Recording Script ~y~deactivated!"
jump @CARRECORD_INITIAL

//-----------------------------------------------------------------------------------------------------------------
//--------------------------------------------------SCM FUNCTIONS--------------------------------------------------

:IF1OR2KEYSPRESSEDANDTHENRELEASED
0006: 15@ = 0
8039:   NOT 0@ == 0
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_RETURN
0006: 14@ = 1 // keys number
0AB0: key_pressed 0@
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_RETURN
8039:   NOT 1@ == 0
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_CHECKWHENRELEASED
0006: 14@ = 2 // keys number
0AB0: key_pressed 1@
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_RETURN

:IF1OR2KEYSPRESSEDANDTHENRELEASED_CHECKWHENRELEASED
wait 0
0AB0: key_pressed 0@
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_DONE
0019:   14@ > 1
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_CHECKWHENRELEASED
8AB0: NOT key_pressed 1@
jf @IF1OR2KEYSPRESSEDANDTHENRELEASED_CHECKWHENRELEASED

:IF1OR2KEYSPRESSEDANDTHENRELEASED_DONE
0006: 15@ = 1

:IF1OR2KEYSPRESSEDANDTHENRELEASED_RETURN 
0AB2: ret 1 15@

:CARRECORD_PLAY_CHECKSANDSETS
0039:   2@ == 1
jf @CARRECORD_PLAY_CHECKSANDSETS2
01EB: set_traffic_density_multiplier_to 0.0
03DE: set_pedestrians_density_multiplier_to 0.0

:CARRECORD_PLAY_CHECKSANDSETS2
0A97: 2@ = car 0@ struct
0AA7: call_function 0x5BAA80 num_params 1 pop 1 2@ 2@ // get vehicle type (1 - Car, 2 - Bike, 3 - Heli, 4 - Boat, 5 - Plane)
if or
0039:   2@ == 2
0039:   2@ == 4
0039:   2@ == 5
jf @CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS
046C: 3@ = car 0@ driver
856D:   NOT actor 3@ defined
jf @CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS
0039:   1@ == 0 // if playback is not paused
jf @CARRECORD_PLAY_CHECKSANDSETS_RETURN
0560: create_random_actor_in_vehicle 0@ in_driverseat_handle_as 2@
01C2: remove_references_to_actor 2@

:CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS
0039:   1@ == 0 // if playback is not paused
jf @CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS0
if and
8039:   NOT 2@ == 3
8039:   NOT 2@ == 5
jf @CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS0

:CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS1
03A2: set_car_status 0@ to 1
jump @CARRECORD_PLAY_CHECKSANDSETS_RETURN

:CARRECORD_PLAY_CHECKSANDSETS_SETSTATUS0
03A2: set_car_status 0@ to 0

:CARRECORD_PLAY_CHECKSANDSETS_RETURN 
0AB2: ret 0

:STOP_CAR
80DC:   NOT player $PLAYER_CHAR driving 0@
jf @STOP_CAR_RETURN
046C: 1@ = car 0@ driver
856D:   NOT actor 1@ defined
jf @STOP_CAR2
0560: create_random_actor_in_vehicle 0@ in_driverseat_handle_as 1@
01C2: remove_references_to_actor 1@

:STOP_CAR2
0407: create_coordinate 1@ 2@ 3@ from_car 0@ offset 0.0 0.1 0.0
02C2: car 0@ drive_to_point 1@ 2@ 3@

:STOP_CAR_RETURN
0AB2: ret 0

:ALLOCATEMEMORY
0AC8: 1@ = allocate_memory_size 0@
0085: 2@ = 1@
000A: 2@ += 0x04  // first 4 bytes is reserved for global timer, second - for max file size, third - for current frame number
0A8C: write_memory 2@ size 4 value 0@ virtual_protect 1 // recording file size
0AB2: ret 1 1@

:CARRECORD_RECORDING
0085: 3@ = 1@
0A8D: 5@ = read_memory 3@ size 4 virtual_protect 1 // getting saved global timer
0085: 4@ = 1@
000A: 4@ += 0x04 
0A8D: 6@ = read_memory 4@ size 4 virtual_protect 1 // getting max file size
000E: 6@ -= 0x88 // last few bytes of memory may be corrupted so we'll skip 2 frames to prevent some bugs
000A: 4@ += 0x04 
0A8D: 7@ = read_memory 4@ size 4 virtual_protect 1 // getting current frame number
0039:   5@ == 0
jf @CARRECORD_RECORDING_CHECKOFFSET
01BD: 5@ = current_time_in_ms
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving current global timer
0006: 7@ = 0
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving zero frame

:CARRECORD_RECORDING_CHECKOFFSET
// Check Time:
01BD: 8@ = current_time_in_ms
0062: 8@ -= 5@
0085: 10@ = 8@
0016: 10@ /= 1000
gosub @CARRECORD_RECORDING_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_RECORDING_NOFREEMEMORY
0093: 9@ = integer 6@ to_float
0093: 15@ = integer 11@ to_float
0073: 15@ /= 9@
0013: 15@ *= 100.0
0092: 15@ = float 15@ to_integer
0006: 9@ = 100
0062: 9@ -= 15@ // free memory percent
gosub @CARRECORD_RECORDING_GETCURRENTOFFSET
gosub @CARRECORD_RECORDING_GETADDRESSBYOFFSET
000A: 7@ += 1 
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving next frame number
000E: 7@ -= 1 // back to current frame number
// Recording Time:
0A8C: write_memory 15@ size 4 value 8@ virtual_protect 1 // recording time
000A: 15@ += 0x04
0A97: 14@ = car 0@ struct
// Recording Matrix:
0085: 13@ = 14@ 
000A: 13@ += 0x04 // right x 
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording right x
000A: 13@ += 0x04 // right y
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording right y
000A: 13@ += 0x04 // right z
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording right z
000A: 13@ += 0x08 // up x 
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording up x
000A: 13@ += 0x04 // up y
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording up y
000A: 13@ += 0x04 // up z
gosub @CARRECORD_RECORDING_SAVEROTVALUETOINT16 // recording up z
000A: 13@ += 0x18 // position x 
gosub @CARRECORD_RECORDING_SAVEVALUE // recording position x
000A: 13@ += 0x04 // position y
gosub @CARRECORD_RECORDING_SAVEVALUE // recording position y
000A: 13@ += 0x04 // position z
gosub @CARRECORD_RECORDING_SAVEVALUE // recording position z
// Recording Movement Speed:
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording x push
000A: 13@ += 0x04 // y push
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording y push
000A: 13@ += 0x04 // z push
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording z push
// Recording Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @CARRECORD_RECORDING_SAVESPDVALUETOINT16 // recording z turn speed
// Recording Extra Values:
000A: 13@ += 0x168 // steering angle (negative = wheels right; positive = wheels left)
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 20.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // accelerator pedal power
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 100.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // brake pedal power
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 100.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x05 // hand brake status (16 - off, 48 - on)
0A8D: 12@ = read_memory 13@ size 1 virtual_protect 1
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x47 // horn status
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0A8C: write_memory 15@ size 4 value 12@ virtual_protect 1
0006: 13@ = 0
0019:   9@ > 50
jf @CARRECORD_RECORDING_MEMORYGETTINGLOW
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~t~%d ~h~(Free memory: ~t~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_MEMORYGETTINGLOW
0019:   9@ > 20
jf @CARRECORD_RECORDING_LOWMEMORY
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~y~%d ~h~(Free memory: ~y~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_LOWMEMORY
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~o~%d ~h~(Free memory: ~o~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_NOFREEMEMORY
0006: 13@ = 1

:CARRECORD_RECORDING_RETURN
0AB2: ret 3 13@ 10@ 7@

:CARRECORD_RECORDING_GETCURRENTOFFSET
0085: 11@ = 7@ // get current frame
0012: 11@ *= 0x30 // multiply on frame size
000A: 11@ += 0x0C // plus start offset - now we got current offset
return

:CARRECORD_RECORDING_GETADDRESSBYOFFSET
0085: 15@ = 1@
005A: 15@ += 11@
return

:CARRECORD_RECORDING_SAVEVALUE
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0A8C: write_memory 15@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x04
return

:CARRECORD_RECORDING_SAVEROTVALUETOINT16
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 30000.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 2 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:CARRECORD_RECORDING_SAVESPDVALUETOINT16
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 10000.0
0092: 12@ = float 12@ to_integer
001B:   32768 > 12@
jf @CARRECORD_RECORDING_SAVESPDVALUETOINT16_MORETHAN32767
0019:   12@ > -32769
jf @CARRECORD_RECORDING_SAVESPDVALUETOINT16_LESSTHANMINUS32768
jump @CARRECORD_RECORDING_SAVESPDVALUETOINT16_RETURN

:CARRECORD_RECORDING_SAVESPDVALUETOINT16_MORETHAN32767
0006: 12@ = 32767
jump @CARRECORD_RECORDING_SAVESPDVALUETOINT16_RETURN

:CARRECORD_RECORDING_SAVESPDVALUETOINT16_LESSTHANMINUS32768
0006: 12@ = -32768

:CARRECORD_RECORDING_SAVESPDVALUETOINT16_RETURN
0A8C: write_memory 15@ size 2 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:CARRECORD_RECORDTOCR
0AA7: call_function 0x48DF90 num_params 2 pop 2 "wb" "cleo\\recordings\\carrec.cr" 15@ // FILE *file = CFileMgr::Open("cleo\recordings\carrec.cr", "wb");
0AC7: 13@ = var 14@ offset // float *var_offset = &vars[3];
0085: 1@ = 0@
000A: 1@ += 0x08 
0A8D: 1@ = read_memory 1@ size 4 virtual_protect 1 // total number of frames
0012: 1@ *= 0x30 // multiply on frame size - now we got .cr file size we need
000A: 1@ += 0x0C // plus offset of course
0006: 12@ = 0x0C // start offset

:CARRECORD_RECORDTOCR_02
if
001D:   1@ > 12@
jf @CARRECORD_RECORDTOCR_RETURN
0085: 11@ = 0@
005A: 11@ += 12@
0A8D: 14@ = read_memory 11@ size 4 virtual_protect 1
0AA5: call 0x48DF30 num_params 3 pop 3 4 13@ 15@ // CFileMgr::Write(file, var_offset, 4);
000A: 12@ += 0x04
jump @CARRECORD_RECORDTOCR_02

:CARRECORD_RECORDTOCR_RETURN
0AA5: call 0x48DEA0 num_params 1 pop 1 15@ // CFileMgr::Close(file);
0AB2: ret 0

:CARRECORD_READCR
0AA7: call_function 0x48DF90 num_params 2 pop 2 "rb" "cleo\\recordings\\carrec.cr" 15@ // file = CFileMgr::Open("cleo\recordings\carrec.cr", "rb");
// Get file size to 14@:
0AA5: call 0x48DEE0 num_params 3 pop 3 2 0 15@ // CFileMgr::Seek(file, 0, SEEK_END);
0AA7: call_function 0x652D50 num_params 1 pop 1 15@ 14@ // size = ftell(file);
// Go to beginning of the file:
0AA5: call 0x48DEE0 num_params 3 pop 3 0 0 15@ // CFileMgr::Seek(file, 0, SEEK_SET);
// Now start reading:
000A: 14@ += 0xFF // just some reserve
0AC8: 13@ = allocate_memory_size 14@
000E: 14@ -= 0xFF
0006: 12@ = 0x00
0085: 11@ = 13@
000A: 11@ += 0x04 // first 4 bytes is reserved for global timer
0A8C: write_memory 11@ size 4 value 14@ virtual_protect 1 // recording file size
000A: 11@ += 0x08 // next 4 bytes is reserved for current frame number

:CARRECORD_READCR_02
if
801D:   NOT 12@ > 14@
jf @CARRECORD_READCR_RETURN
0085: 10@ = 11@
005A: 10@ += 12@
0AA5: call 0x48DF50 num_params 3 pop 3 4 10@ 15@ // CFileMgr::Read(file, var_offset, 4);
000A: 12@ += 0x04    
jump @CARRECORD_READCR_02

:CARRECORD_READCR_RETURN
0AA5: call 0x48DEA0 num_params 1 pop 1 15@ // CFileMgr::Close(file);
0AB2: ret 1 13@

:CARRECORD_PLAYBACK
0085: 13@ = 3@
0085: 3@ = 1@
0A8D: 5@ = read_memory 3@ size 4 virtual_protect 1 // getting saved global timer
0085: 4@ = 1@
000A: 4@ += 0x04 
0A8D: 6@ = read_memory 4@ size 4 virtual_protect 1 // getting file size
000E: 6@ -= 0x88 // last few bytes of .cr file may be corrupted so we'll skip 2 frames to prevent some bugs
000A: 4@ += 0x04 
0A8D: 7@ = read_memory 4@ size 4 virtual_protect 1 // getting current frame number
8039:   NOT 2@ == 0 // if frame is predetermined
jf @CARRECORD_PLAYBACK_START
0085: 7@ = 2@
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving predetermined frame number
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
jump @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_START
0039:   5@ == 0
jf @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_RESTART
0006: 2@ = 0
01BD: 5@ = current_time_in_ms
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving current global timer
0006: 7@ = 0
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving zero frame
jump @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_CHECKOFFSET
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_PLAYBACK_RESTART
0093: 15@ = integer 6@ to_float
0093: 9@ = integer 11@ to_float
0073: 9@ /= 15@
0013: 9@ *= 100.0
0092: 9@ = float 9@ to_integer // playback percent
// Check Time:
gosub @PLAYBACK_GETADDRESSBYOFFSET
0A8D: 14@ = read_memory 15@ size 4 virtual_protect 1
8039:   NOT 2@ == 0 // if frame is predetermined
jf @CARRECORD_PLAYBACK_CHECKTIME
01BD: 5@ = current_time_in_ms
0062: 5@ -= 14@
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving pause-mode global timer
0006: 8@ = 0
0085: 10@ = 14@
0016: 10@ /= 1000
jump @CARRECORD_PLAYBACK_APPLYVALUES

:CARRECORD_PLAYBACK_CHECKTIME
01BD: 8@ = current_time_in_ms
0062: 8@ -= 5@
0085: 10@ = 8@
0016: 10@ /= 1000
002D:   8@ >= 14@  // if there is recording for this time
jf @CARRECORD_PLAYBACK_RETURN // else nothing to do here

:CARRECORD_PLAYBACK_SKIPTIME
000A: 7@ += 1
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_PLAYBACK_RESTART
gosub @PLAYBACK_GETADDRESSBYOFFSET
0A8D: 14@ = read_memory 15@ size 4 virtual_protect 1
001D:   14@ > 8@
jf @CARRECORD_PLAYBACK_SKIPTIME
000E: 7@ -= 1

:CARRECORD_PLAYBACK_APPLYVALUES
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
gosub @PLAYBACK_GETADDRESSBYOFFSET
000A: 7@ += 1 
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving next frame number
000E: 7@ -= 1 // back to current frame number
000A: 15@ += 0x04
0085: 11@ = 13@
0A97: 14@ = car 0@ struct
// Playback Matrix:
0085: 13@ = 14@ 
000A: 13@ += 0x04 // right x 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right x
000A: 13@ += 0x04 // right y 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right y
000A: 13@ += 0x04 // right z 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right z
000A: 13@ += 0x08 // up x 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up x
000A: 13@ += 0x04 // up y
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up y
000A: 13@ += 0x04 // up z
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up z
000A: 13@ += 0x18 // position x 
gosub @PLAYBACK_APPLYVALUE // playback position x
000A: 13@ += 0x04 // position y
gosub @PLAYBACK_APPLYVALUE // playback position y
000A: 13@ += 0x04 // position z
gosub @PLAYBACK_APPLYVALUE // playback position z
// Playback Movement Speed:
if
0019:   8@ > 0
jf @CARRECORD_PLAYBACK_NOPUSH
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback x push
000A: 13@ += 0x04 // y push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16// playback y push
000A: 13@ += 0x04 // z push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback z push
// Playback Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback z turn speed
jump @CARRECORD_PLAYBACK_FINISH

:CARRECORD_PLAYBACK_NOPUSH
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @PLAYBACK_APPLYZERO // playback x push
000A: 13@ += 0x04 // y push
gosub @PLAYBACK_APPLYZERO // playback y push
000A: 13@ += 0x04 // z push
gosub @PLAYBACK_APPLYZERO // playback z push
// Playback Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @PLAYBACK_APPLYZERO // playback x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @PLAYBACK_APPLYZERO // playback y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @PLAYBACK_APPLYZERO // playback z turn speed

:CARRECORD_PLAYBACK_FINISH
// Playback Extra Values:
000A: 13@ += 0x168 // steering angle (negative = wheels right; positive = wheels left)
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 20.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // accelerator pedal power
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 100.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // brake pedal power
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 100.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x05 // hand brake/heli weapon status (16 - off, 48 - on)
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
0A8C: write_memory 13@ size 1 value 12@ virtual_protect 1
0019:   12@ > 16
jf @CARRECORD_PLAYBACK_FINISH2
if or
0137:   car 0@ model == 155 // hunter
0137:   car 0@ model == 177 // seaspar 
jf @CARRECORD_PLAYBACK_FINISH2
0541: fire_guns_on_vehicle 0@

:CARRECORD_PLAYBACK_FINISH2
000A: 15@ += 0x01
000A: 13@ += 0x4C // activate horn/siren
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
0A8C: write_memory 13@ size 1 value 12@ virtual_protect 1

:CARRECORD_PLAYBACK_RETURN
0039:   11@ == 1
jf @CARRECORD_PLAYBACK_RETURN2
0AD1: show_formatted_text_highpriority "~p~PLAYBACK: %d sec. ~h~Frame: ~p~%d ~h~(~p~%d%% ~h~of full recording)" time 100 10@ 7@ 9@

:CARRECORD_PLAYBACK_RETURN2
0AB2: ret 1 7@

:CARRECORD_PLAYBACK_GETCURRENTOFFSET
0085: 11@ = 7@ // get current frame
0012: 11@ *= 0x30 // multiply on frame size
000A: 11@ += 0x0C // plus start offset - now we got current offset
return

:PLAYBACK_GETADDRESSBYOFFSET
0085: 15@ = 1@
005A: 15@ += 11@
return

:PLAYBACK_APPLYVALUE
0A8D: 12@ = read_memory 15@ size 4 virtual_protect 1
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x04
return

:PLAYBACK_APPLYROTVALUEFROMINT16
0A8D: 12@ = read_memory 15@ size 2 virtual_protect 1
0019:   12@ > 32767
jf @PLAYBACK_APPLYROTVALUEFROMINT16_RETURN
000E: 12@ -= 65536

:PLAYBACK_APPLYROTVALUEFROMINT16_RETURN
0093: 12@ = integer 12@ to_float
0017: 12@ /= 30000.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:PLAYBACK_APPLYSPDVALUEFROMINT16
0A8D: 12@ = read_memory 15@ size 2 virtual_protect 1
0019:   12@ > 32767
jf @PLAYBACK_APPLYSPDVALUEFROMINT16_RETURN
000E: 12@ -= 65536

:PLAYBACK_APPLYSPDVALUEFROMINT16_RETURN
0093: 12@ = integer 12@ to_float
0017: 12@ /= 10000.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:PLAYBACK_CHECKBYTEREADINGERROR
0019:   12@ > 127
jf @PLAYBACK_CHECKBYTEREADINGERROR_RETURN
000E: 12@ -= 256

:PLAYBACK_CHECKBYTEREADINGERROR_RETURN
return

:PLAYBACK_APPLYZERO
0A8C: write_memory 13@ size 4 value 0.0 virtual_protect 1
000A: 15@ += 0x02
return