:CARRECORD_RECORDING
0085: 3@ = 1@
0A8D: 5@ = read_memory 3@ size 4 virtual_protect 1 // getting saved global timer
0085: 4@ = 1@
000A: 4@ += 0x04 
0A8D: 6@ = read_memory 4@ size 4 virtual_protect 1 // getting max file size
000E: 6@ -= 0x60 // last few bytes of memory may be corrupted so we'll skip 2 frames to prevent some bugs
000A: 4@ += 0x04 
0A8D: 7@ = read_memory 4@ size 4 virtual_protect 1 // getting current frame number
0039:   5@ == 0
jf @CARRECORD_RECORDING_CHECKOFFSET
01BD: 5@ = current_time_in_ms
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving current global timer
0006: 7@ = 0
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving zero frame

:CARRECORD_RECORDING_CHECKOFFSET
// Check Time:
01BD: 8@ = current_time_in_ms
0062: 8@ -= 5@
0085: 10@ = 8@
0016: 10@ /= 1000
gosub @CARRECORD_RECORDING_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_RECORDING_NOFREEMEMORY
0093: 9@ = integer 6@ to_float
0093: 15@ = integer 11@ to_float
0073: 15@ /= 9@
0013: 15@ *= 100.0
0092: 15@ = float 15@ to_integer
0006: 9@ = 100
0062: 9@ -= 15@ // free memory percent
gosub @CARRECORD_RECORDING_GETCURRENTOFFSET
gosub @RECORDING_GETADDRESSBYOFFSET
000A: 7@ += 1 
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving next frame number
000E: 7@ -= 1 // back to current frame number
// Recording Time:
0A8C: write_memory 15@ size 4 value 8@ virtual_protect 1 // recording time
000A: 15@ += 0x04
0A97: 14@ = car 0@ struct
// Recording Matrix:
0085: 13@ = 14@ 
000A: 13@ += 0x04 // right x 
gosub @RECORDING_SAVEROTVALUETOINT16 // recording right x
000A: 13@ += 0x04 // right y
gosub @RECORDING_SAVEROTVALUETOINT16 // recording right y
000A: 13@ += 0x04 // right z
gosub @RECORDING_SAVEROTVALUETOINT16 // recording right z
000A: 13@ += 0x08 // up x 
gosub @RECORDING_SAVEROTVALUETOINT16 // recording up x
000A: 13@ += 0x04 // up y
gosub @RECORDING_SAVEROTVALUETOINT16 // recording up y
000A: 13@ += 0x04 // up z
gosub @RECORDING_SAVEROTVALUETOINT16 // recording up z
000A: 13@ += 0x18 // position x 
gosub @RECORDING_SAVEVALUE // recording position x
000A: 13@ += 0x04 // position y
gosub @RECORDING_SAVEVALUE // recording position y
000A: 13@ += 0x04 // position z
gosub @RECORDING_SAVEVALUE // recording position z
// Recording Movement Speed:
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @RECORDING_SAVESPDVALUETOINT16 // recording x push
000A: 13@ += 0x04 // y push
gosub @RECORDING_SAVESPDVALUETOINT16 // recording y push
000A: 13@ += 0x04 // z push
gosub @RECORDING_SAVESPDVALUETOINT16 // recording z push
// Recording Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @RECORDING_SAVESPDVALUETOINT16 // recording x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @RECORDING_SAVESPDVALUETOINT16 // recording y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @RECORDING_SAVESPDVALUETOINT16 // recording z turn speed
// Recording Extra Values:
000A: 13@ += 0x168 // steering angle (negative = wheels right; positive = wheels left)
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 20.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // accelerator pedal power
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 100.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // brake pedal power
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 100.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x05 // hand brake status (16 - off, 48 - on)
0A8D: 12@ = read_memory 13@ size 1 virtual_protect 1
0A8C: write_memory 15@ size 1 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x47 // horn status
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0A8C: write_memory 15@ size 4 value 12@ virtual_protect 1
0006: 13@ = 0
0019:   9@ > 50
jf @CARRECORD_RECORDING_MEMORYGETTINGLOW
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~t~%d ~h~(Free memory: ~t~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_MEMORYGETTINGLOW
0019:   9@ > 20
jf @CARRECORD_RECORDING_LOWMEMORY
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~y~%d ~h~(Free memory: ~y~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_LOWMEMORY
0039:   2@ == 1
jf @CARRECORD_RECORDING_RETURN
0AD1: show_formatted_text_highpriority "~o~RECORDING: %d sec. ~h~Last frame: ~o~%d ~h~(Free memory: ~o~%d%%~h~)" time 100 10@ 7@ 9@
jump @CARRECORD_RECORDING_RETURN

:CARRECORD_RECORDING_NOFREEMEMORY
0006: 13@ = 1

:CARRECORD_RECORDING_RETURN
0AB2: ret 1 13@

:CARRECORD_RECORDING_GETCURRENTOFFSET
0085: 11@ = 7@ // get current frame
0012: 11@ *= 0x30 // multiply on frame size
000A: 11@ += 0x0C // plus start offset - now we got current offset
return

:RECORDING_GETADDRESSBYOFFSET
0085: 15@ = 1@
005A: 15@ += 11@
return

:RECORDING_SAVEVALUE
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0A8C: write_memory 15@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x04
return

:RECORDING_SAVEROTVALUETOINT16
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 30000.0
0092: 12@ = float 12@ to_integer
0A8C: write_memory 15@ size 2 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:RECORDING_SAVESPDVALUETOINT16
0A8D: 12@ = read_memory 13@ size 4 virtual_protect 1
0013: 12@ *= 10000.0
0092: 12@ = float 12@ to_integer
001B:   32768 > 12@
jf @RECORDING_SAVESPDVALUETOINT16_MORETHAN32767
0019:   12@ > -32769
jf @RECORDING_SAVESPDVALUETOINT16_LESSTHANMINUS32768
jump @RECORDING_SAVESPDVALUETOINT16_RETURN

:RECORDING_SAVESPDVALUETOINT16_MORETHAN32767
0006: 12@ = 32767
jump @RECORDING_SAVESPDVALUETOINT16_RETURN

:RECORDING_SAVESPDVALUETOINT16_LESSTHANMINUS32768
0006: 12@ = -32768

:RECORDING_SAVESPDVALUETOINT16_RETURN
0A8C: write_memory 15@ size 2 value 12@ virtual_protect 1
000A: 15@ += 0x02
return