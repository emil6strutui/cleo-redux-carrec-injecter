:CARRECORD_PLAYBACK
0085: 13@ = 3@
0085: 3@ = 1@
0A8D: 5@ = read_memory 3@ size 4 virtual_protect 1 // getting saved global timer
0085: 4@ = 1@
000A: 4@ += 0x04 
0A8D: 6@ = read_memory 4@ size 4 virtual_protect 1 // getting file size
000E: 6@ -= 0x60 // last few bytes of .cr file may be corrupted so we'll skip 2 frames to prevent some bugs
000A: 4@ += 0x04 
0A8D: 7@ = read_memory 4@ size 4 virtual_protect 1 // getting current frame number
8039:   NOT 2@ == 0 // if frame is predetermined
jf @CARRECORD_PLAYBACK_START
0085: 7@ = 2@
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving predetermined frame number
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
jump @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_START
0039:   5@ == 0
jf @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_RESTART
0006: 2@ = 0
01BD: 5@ = current_time_in_ms
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving current global timer
0006: 7@ = 0
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving zero frame
jump @CARRECORD_PLAYBACK_CHECKOFFSET

:CARRECORD_PLAYBACK_CHECKOFFSET
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_PLAYBACK_RESTART
0093: 15@ = integer 6@ to_float
0093: 9@ = integer 11@ to_float
0073: 9@ /= 15@
0013: 9@ *= 100.0
0092: 9@ = float 9@ to_integer // playback percent
// Check Time:
gosub @PLAYBACK_GETADDRESSBYOFFSET
0A8D: 14@ = read_memory 15@ size 4 virtual_protect 1
8039:   NOT 2@ == 0 // if frame is predetermined
jf @CARRECORD_PLAYBACK_CHECKTIME
01BD: 5@ = current_time_in_ms
0062: 5@ -= 14@
0A8C: write_memory 3@ size 4 value 5@ virtual_protect 1 // saving pause-mode global timer
0006: 8@ = 0
0085: 10@ = 14@
0016: 10@ /= 1000
jump @CARRECORD_PLAYBACK_APPLYVALUES

:CARRECORD_PLAYBACK_CHECKTIME
01BD: 8@ = current_time_in_ms
0062: 8@ -= 5@
0085: 10@ = 8@
0016: 10@ /= 1000
002D:   8@ >= 14@  // if there is recording for this time
jf @CARRECORD_PLAYBACK_RETURN // else nothing to do here

:CARRECORD_PLAYBACK_SKIPTIME
000A: 7@ += 1
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
001D:   6@ > 11@
jf @CARRECORD_PLAYBACK_RESTART
gosub @PLAYBACK_GETADDRESSBYOFFSET
0A8D: 14@ = read_memory 15@ size 4 virtual_protect 1
001D:   14@ > 8@
jf @CARRECORD_PLAYBACK_SKIPTIME
000E: 7@ -= 1

:CARRECORD_PLAYBACK_APPLYVALUES
gosub @CARRECORD_PLAYBACK_GETCURRENTOFFSET
gosub @PLAYBACK_GETADDRESSBYOFFSET
000A: 7@ += 1 
0A8C: write_memory 4@ size 4 value 7@ virtual_protect 1 // saving next frame number
000E: 7@ -= 1 // back to current frame number
000A: 15@ += 0x04
0085: 11@ = 13@
0A97: 14@ = car 0@ struct
// Playback Matrix:
0085: 13@ = 14@ 
000A: 13@ += 0x04 // right x 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right x
000A: 13@ += 0x04 // right y 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right y
000A: 13@ += 0x04 // right z 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback right z
000A: 13@ += 0x08 // up x 
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up x
000A: 13@ += 0x04 // up y
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up y
000A: 13@ += 0x04 // up z
gosub @PLAYBACK_APPLYROTVALUEFROMINT16 // playback up z
000A: 13@ += 0x18 // position x 
gosub @PLAYBACK_APPLYVALUE // playback position x
000A: 13@ += 0x04 // position y
gosub @PLAYBACK_APPLYVALUE // playback position y
000A: 13@ += 0x04 // position z
gosub @PLAYBACK_APPLYVALUE // playback position z
// Playback Movement Speed:
if
0019:   8@ > 0
jf @CARRECORD_PLAYBACK_NOPUSH
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback x push
000A: 13@ += 0x04 // y push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16// playback y push
000A: 13@ += 0x04 // z push
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback z push
// Playback Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @PLAYBACK_APPLYSPDVALUEFROMINT16 // playback z turn speed
jump @CARRECORD_PLAYBACK_FINISH

:CARRECORD_PLAYBACK_NOPUSH
0085: 13@ = 14@
000A: 13@ += 0x70 // x push
gosub @PLAYBACK_APPLYZERO // playback x push
000A: 13@ += 0x04 // y push
gosub @PLAYBACK_APPLYZERO // playback y push
000A: 13@ += 0x04 // z push
gosub @PLAYBACK_APPLYZERO // playback z push
// Playback Turn Speed:
000A: 13@ += 0x04 // x turn speed
gosub @PLAYBACK_APPLYZERO // playback x turn speed
000A: 13@ += 0x04 // y turn speed
gosub @PLAYBACK_APPLYZERO // playback y turn speed
000A: 13@ += 0x04 // z turn speed
gosub @PLAYBACK_APPLYZERO // playback z turn speed

:CARRECORD_PLAYBACK_FINISH
// Playback Extra Values:
000A: 13@ += 0x168 // steering angle (negative = wheels right; positive = wheels left)
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 20.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // accelerator pedal power
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 100.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x04 // brake pedal power
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
gosub @PLAYBACK_CHECKBYTEREADINGERROR
0093: 12@ = integer 12@ to_float
0017: 12@ /= 100.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x01
000A: 13@ += 0x05 // hand brake/heli weapon status (16 - off, 48 - on)
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
0A8C: write_memory 13@ size 1 value 12@ virtual_protect 1
0019:   12@ > 16
jf @CARRECORD_PLAYBACK_FINISH2
if or
0137:   car 0@ model == 155 // hunter
0137:   car 0@ model == 177 // seaspar 
jf @CARRECORD_PLAYBACK_FINISH2
0541: fire_guns_on_vehicle 0@

:CARRECORD_PLAYBACK_FINISH2
000A: 15@ += 0x01
000A: 13@ += 0x4C // activate horn/siren
0A8D: 12@ = read_memory 15@ size 1 virtual_protect 1
0A8C: write_memory 13@ size 1 value 12@ virtual_protect 1

:CARRECORD_PLAYBACK_RETURN
0039:   11@ == 1
jf @CARRECORD_PLAYBACK_RETURN2
0AD1: show_formatted_text_highpriority "~p~PLAYBACK: %d sec. ~h~Frame: ~p~%d ~h~(~p~%d%% ~h~of full recording)" time 100 10@ 7@ 9@

:CARRECORD_PLAYBACK_RETURN2
0AB2: ret 1 7@

:CARRECORD_PLAYBACK_GETCURRENTOFFSET
0085: 11@ = 7@ // get current frame
0012: 11@ *= 0x30 // multiply on frame size
000A: 11@ += 0x0C // plus start offset - now we got current offset
return

:PLAYBACK_GETADDRESSBYOFFSET
0085: 15@ = 1@
005A: 15@ += 11@
return

:PLAYBACK_APPLYVALUE
0A8D: 12@ = read_memory 15@ size 4 virtual_protect 1
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x04
return

:PLAYBACK_APPLYROTVALUEFROMINT16
0A8D: 12@ = read_memory 15@ size 2 virtual_protect 1
0019:   12@ > 32767
jf @PLAYBACK_APPLYROTVALUEFROMINT16_RETURN
000E: 12@ -= 65536

:PLAYBACK_APPLYROTVALUEFROMINT16_RETURN
0093: 12@ = integer 12@ to_float
0017: 12@ /= 30000.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:PLAYBACK_APPLYSPDVALUEFROMINT16
0A8D: 12@ = read_memory 15@ size 2 virtual_protect 1
0019:   12@ > 32767
jf @PLAYBACK_APPLYSPDVALUEFROMINT16_RETURN
000E: 12@ -= 65536

:PLAYBACK_APPLYSPDVALUEFROMINT16_RETURN
0093: 12@ = integer 12@ to_float
0017: 12@ /= 10000.0
0A8C: write_memory 13@ size 4 value 12@ virtual_protect 1
000A: 15@ += 0x02
return

:PLAYBACK_CHECKBYTEREADINGERROR
0019:   12@ > 127
jf @PLAYBACK_CHECKBYTEREADINGERROR_RETURN
000E: 12@ -= 256

:PLAYBACK_CHECKBYTEREADINGERROR_RETURN
return

:PLAYBACK_APPLYZERO
0A8C: write_memory 13@ size 4 value 0.0 virtual_protect 1
000A: 15@ += 0x02
return